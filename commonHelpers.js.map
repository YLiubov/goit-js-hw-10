{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst startBtn = document.querySelector(\"button[data-start]\");\nconst inputEl = document.querySelector('input[type=\"text\"]');\n\nconst timerRefs = {\n    days: document.querySelector(\"span[data-days]\"),\n    hours: document.querySelector(\"span[data-hours]\"),\n    minutes: document.querySelector(\"span[data-minutes]\"),\n    seconds: document.querySelector(\"span[data-seconds]\"),\n};\n\nlet userSelectedDate;\nstartBtn.disabled = true;\n\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0]\n      if (userSelectedDate < Date.now()) {\n        iziToast.error({\n            message: 'Please choose a date in the future',\n            position: 'topRight',\n        });\n    } else {\n        startBtn.disabled = false;\n    }\n    },\n  };\n\n  flatpickr(inputEl, options);\n\n  \nfunction convertMs(ms) {\n    \n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n\n\nfunction pad(value) {\n    return String(value).padStart(2, \"0\");\n}\n\n\nstartBtn.addEventListener('click', handleClick)\n\nfunction handleClick () {\n    startBtn.disabled = true;\n    inputEl.disabled = true;\n\n    let timerId = setInterval(() => {\n        const countDown = userSelectedDate -  Date.now()\n\n        if(countDown < 0) {\n            clearInterval(timerId);\n            inputEl.disabled = false;\n            return;\n        }\n\n        updateTimer(convertMs(countDown))\n    },\n    1000)\n}\n\n\nfunction updateTimer ({days, hours, minutes, seconds}) {\n    console.log(timerRefs);\n    timerRefs.days.textContent = pad(days);\n    timerRefs.hours.textContent = pad(hours);\n    timerRefs.minutes.textContent = pad(minutes);\n    timerRefs.seconds.textContent = pad(seconds);\n}"],"names":["startBtn","inputEl","timerRefs","userSelectedDate","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","pad","value","handleClick","timerId","countDown","updateTimer"],"mappings":"sFAOA,MAAMA,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAU,SAAS,cAAc,oBAAoB,EAErDC,EAAY,CACd,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACxD,EAEA,IAAIC,EACJH,EAAS,SAAW,GAGpB,MAAMI,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACnBF,EAAmBE,EAAc,CAAC,EAChCF,EAAmB,KAAK,MAC1BG,EAAS,MAAM,CACX,QAAS,qCACT,SAAU,UACtB,CAAS,EAEDN,EAAS,SAAW,EAEvB,CACL,EAEEO,EAAUN,EAASG,CAAO,EAG5B,SAASI,EAAUC,EAAI,CAOnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAGH,SAASC,EAAIC,EAAO,CAChB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAGAf,EAAS,iBAAiB,QAASgB,CAAW,EAE9C,SAASA,GAAe,CACpBhB,EAAS,SAAW,GACpBC,EAAQ,SAAW,GAEnB,IAAIgB,EAAU,YAAY,IAAM,CAC5B,MAAMC,EAAYf,EAAoB,KAAK,IAAK,EAEhD,GAAGe,EAAY,EAAG,CACd,cAAcD,CAAO,EACrBhB,EAAQ,SAAW,GACnB,MACH,CAEDkB,EAAYX,EAAUU,CAAS,CAAC,CACnC,EACD,GAAI,CACR,CAGA,SAASC,EAAa,CAAC,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAG,CACnD,QAAQ,IAAIX,CAAS,EACrBA,EAAU,KAAK,YAAcY,EAAIJ,CAAI,EACrCR,EAAU,MAAM,YAAcY,EAAIH,CAAK,EACvCT,EAAU,QAAQ,YAAcY,EAAIF,CAAO,EAC3CV,EAAU,QAAQ,YAAcY,EAAID,CAAO,CAC/C"}